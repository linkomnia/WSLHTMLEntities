//
//  WSLHTMLEntities.m
//  WSLHTMLEntities
//
//  Created by Stephen Darlington on 05/06/2012.
//  Copyright (c) 2012 Wandle Software Limited. All rights reserved.
//

#import "WSLHTMLEntities.h"
#import "WSLHTMLEntityDefinitions.h"

// this file is generated by flex. By rights we probably should create a custom build
// rule so that this is guaranteed to exist
#import "WSLHTMLEntities-lex.h"

@interface WSLHTMLEntities ()

+(NSString*)convertHTMLtoString:(NSString*)html scanner:(yyscan_t)scanner;

@end

@implementation WSLHTMLEntities {
    yyscan_t _scanner;
}

-(id)init {
    self = [super init];
    if (self) {
        WSLlex_init(&_scanner);
    }
    return self;
}

-(void)dealloc {
    WSLlex_destroy(_scanner);
#if !__has_feature(objc_arc)
    [super dealloc];
#endif
}

-(NSString*)convertHTMLtoString:(NSString*)html {
    WSLrestart(NULL, _scanner);
    return [WSLHTMLEntities convertHTMLtoString:html scanner:_scanner];
}

+(NSString*)convertHTMLtoString:(NSString*)html {
    yyscan_t scanner;
    
    WSLlex_init(&scanner);
    NSString* retv = [WSLHTMLEntities convertHTMLtoString:html scanner:scanner];
    WSLlex_destroy(scanner);
    return retv;
}

+(NSString*)convertHTMLtoString:(NSString*)html scanner:(yyscan_t)scanner {
    if (! [html canBeConvertedToEncoding:NSISOLatin1StringEncoding]) {
        // if it's not UTF8 I'm not sure what to do with it...
        return html;
    }
    
    const char* text = [html cStringUsingEncoding:NSISOLatin1StringEncoding];
    
    WSL_scan_string(text, scanner);
    int expression;
    NSMutableString* output = [NSMutableString string];
    while ((expression = WSLlex(scanner))) {
        // TODO: there has to be a more efficient way of doing this...
        switch (expression) {
            case WSL_ENTITIY_NOMATCH:
                [output appendFormat:@"%@", [NSString stringWithCString:WSLget_text(scanner)
                                                               encoding:NSISOLatin1StringEncoding]];
                break;
            case WSL_ENTITIY_NUMBER:
                expression = atoi(&WSLget_text(scanner)[2]);
                // fall through so expression is added to string
            default:
                [output appendFormat:@"%C", (unsigned short) expression];
                break;
        }
    }
    
    return output;
}

@end
